import React from 'react';
import connect from '@vkontakte/vkui-connect';
import { View, Search, Gallery, Button, Group, InfoRow, Panel, FixedLayout, PanelHeader, Div, Cell, List } from '@vkontakte/vkui';
import '@vkontakte/vkui/dist/vkui.css';

class App extends React.Component {
	constructor(props) {
		super(props);

		this.state = {
			search : '',
			games : []
		};

		this.onChange = this.onChange.bind(this)
	}

	Translitirate(word) {
		if (word != undefined) {
			var A = {};
			var result = '';
	
			A["–Å"] = "YO"; A["–ô"] = "I"; A["–¶"] = "TS"; A["–£"] = "U"; A["–ö"] = "K"; A["–ï"] = "E"; A["–ù"] = "N"; A["–ì"] = "G"; A["–®"] = "SH"; A["–©"] = "SCH"; A["–ó"] = "Z"; A["–•"] = "H"; A["–™"] = "'";
			A["—ë"] = "yo"; A["–π"] = "i"; A["—Ü"] = "ts"; A["—É"] = "u"; A["–∫"] = "k"; A["–µ"] = "e"; A["–Ω"] = "n"; A["–≥"] = "g"; A["—à"] = "sh"; A["—â"] = "sch"; A["–∑"] = "z"; A["—Ö"] = "h"; A["—ä"] = "'";
			A["–§"] = "F"; A["–´"] = "I"; A["–í"] = "V"; A["–ê"] = "A"; A["–ü"] = "P"; A["–†"] = "R"; A["–û"] = "O"; A["–õ"] = "L"; A["–î"] = "D"; A["–ñ"] = "ZH"; A["–≠"] = "E";
			A["—Ñ"] = "f"; A["—ã"] = "i"; A["–≤"] = "v"; A["–∞"] = "a"; A["–ø"] = "p"; A["—Ä"] = "r"; A["–æ"] = "o"; A["–ª"] = "l"; A["–¥"] = "d"; A["–∂"] = "zh"; A["—ç"] = "e";
			A["–Ø"] = "YA"; A["–ß"] = "CH"; A["–°"] = "S"; A["–ú"] = "M"; A["–ò"] = "I"; A["–¢"] = "T"; A["–¨"] = "'"; A["–ë"] = "B"; A["–Æ"] = "YU";
			A["—è"] = "ya"; A["—á"] = "ch"; A["—Å"] = "s"; A["–º"] = "m"; A["–∏"] = "i"; A["—Ç"] = "t"; A["—å"] = "'"; A["–±"] = "b"; A["—é"] = "yu";
	
			for (var i = 0; i < word.length; i++) {
				var c = word.charAt(i);
	
				result += A[c] || c;
			}
		
			return result.replace(/[\W_]+/g, " ");
		} else {
			return ""
		}
	}

	onGetResult(search){ 
		this.setState({ 
			games : [] 
		}, function() {
			fetch(`https://api.rawg.io/api/games/${search}/suggested?page_size=5`)
			.then(res => res.json())
			.then(data => {
				if (typeof data.results !== 'undefined') {
					this.setState({
						games : data.results
					})
				}
			})
		});
	}

	onChange(search) {

		this.setState({ 
			search : search,
		}, function() {
			fetch(`https://api.rawg.io/api/games?page_size=5&search=${this.Translitirate(search)}`)
			.then(res => res.json())
			.then(data => {
				if (typeof data.results !== 'undefined') {
					if (data.results[0] != null) {
						this.onGetResult(data.results[0].slug)
					}
				}
			})
		});
	}

	getYear(gameDate) {
		return new Date(gameDate).getFullYear();
	}

	isMetacriticAvailable(score) {
		if (score != undefined) {
			return score;
		} else {
			return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		}
	}

	openShowImages(images) {
		connect.send("VKWebAppShowImages", { 
			images:  images
		  });
	}


	render() {
		return (
			<View activePanel="main">
				<Panel id="main" theme="white">
				<PanelHeader>
						<b>–ù–∞–π–¥–∏ –ø–æ—Ö–æ–∂—É—é –∏–≥—Ä—É</b> <span role="img">üéÆ</span>
				</PanelHeader>
					<div>
					<FixedLayout vertical="top" style={{ background: 'white' }}>
					<Search
							value={this.state.search}
							onChange={this.onChange}
							/>
						</FixedLayout>
						<Div style={{
							paddingTop: 40
						}}>
						{
							
							this.state.games.length > 0 &&
							this.state.games.map((game, index) => (
								<div key={index} style={{
									padding : 16
								}}>
									<h2>{game.name}</h2>
									<Group 
										title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ"
										style={{
											marginBottom : 16
										}}
									>
										<List>
											<Cell>
												<InfoRow title="–ñ–∞–Ω—Ä">
												{	this.state.games.length > 0 &&
													game.genres.map((gen, index) => (
														<span key={index}>{gen.name} </span>
													))
												}
												</InfoRow>
											</Cell>
											<Cell>
												<InfoRow title="–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞">
													{this.getYear(game.released)}
												</InfoRow>
											</Cell>
											<Cell>
												<InfoRow title="Metacritic">
													{this.isMetacriticAvailable(game.metacritic)}
												</InfoRow>
											</Cell>
											<Div>
												<InfoRow title="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" />
													{game.short_description}
											</Div>
											<Div>
												<InfoRow title="–ì–¥–µ –∫—É–ø–∏—Ç—å" />
												{
													game.stores.map((store, index) => (
														<Button style={{
															margin: 5
															}} 
															level="commerce"
															key={index}
															component="a" 
															href={store.url_en}>
															{store.store.name}
														</Button>
													))
												}
											</Div>
											<Cell>
												<InfoRow title="–ì–∞–ª–µ—Ä–µ—è" />
												<Gallery
													slideWidth="90%"
													style={{ height: 'inherit' }}
												>
												{
													game.short_screenshots.map((screen, index) => (
														<img
															alt=""
															src={screen.image}
															key={index}
															style={{
																minWidth : 320
															}}
															onClick={(e) => {
																	let images = game.short_screenshots.map((scr) => scr.image)
																	this.openShowImages(images)
																}
															}
														></img>
													))
												}
												</Gallery>
											</Cell>
										</List>
									</Group>
								</div>
							))
							}
							</Div>
					</div>
    			</Panel>
			</View>
		);
	}
}

export default App;
